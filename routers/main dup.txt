
from xmlrpc.client import boolean
from fastapi import FastAPI,Depends,HTTPException
import models
from database import SessionLocal, engine

from sqlalchemy.orm import Session

from typing import Optional

from pydantic import BaseModel, Field

from routers.auth import get_current_user, get_user_exception

from routers import auth


app = FastAPI()



models.Base.metadata.create_all(bind=engine)

app.include_router(auth.router )

def get_db():
    try:
        db= SessionLocal()
        yield db
    finally:
        db.close()

class Todo(BaseModel):
    title:str
    description:Optional[str]
    priority:int = Field(gt=0,lt=6, description="the priority must between 1-5")
    complete:bool

@app.get("/")
def readall(db:Session=Depends(get_db)):
    return db.query(models.Todos).all()

@app.get("/todos/users")
def read_all_by_user(user:dict=Depends(get_current_user),db:Session= Depends(get_db)):

    if user is None:
        raise get_user_exception()
    return db.query(models.Todos).filter(models.Todos.owner_id==user.get("id")).all()

@app.get("/todo/{todo_id}")
def readall(todo_id:int,user:dict=Depends(get_current_user),db:Session=Depends(get_db)):
    
    if user is None:
        raise get_user_exception()

    x=db.query(models.Todos).filter(models.Todos.id==todo_id).filter(models.Todos.owner_id==user.get("id")).first()
    #.first used to return the value once it founded and it dont need to go through the db
    if x is not None:
        return x
    raise http_exception()



@app.post("/")
def createTodo(todo:Todo,user:dict=Depends(get_current_user),db:Session=Depends(get_db)):
    if user is None:
        raise get_user_exception()

    todo_model=models.Todos()
    todo_model.title=todo.title
    todo_model.description=todo.description
    todo_model.priority=todo.priority
    todo_model.complete=todo.complete
    todo_model.owner_id=user.get("id")

    db.add(todo_model)
    db.commit()

    return{"added":"successfully"}




@app.put("/update/{todo_id}")
def updatetodo(todo_id:int,todo:Todo,user:dict=Depends(get_current_user),db:Session=Depends(get_db)):
    todo_model=db.query(models.Todos).filter(models.Todos.id==todo_id).filter(models.Todos.owner_id==user.get("id")).first()

    if todo_model is None:
        raise http_exception()
    
    todo_model.title=todo.title
    todo_model.description=todo.description
    todo_model.priority=todo.priority
    todo_model.complete=todo.complete

    db.add(todo_model)
    db.commit()

    return{"added":"successfully"}


@app.delete("/deleteToDo/{todo_id}")
def deleteToDo(todo_id:int,user:dict=Depends(get_current_user),db:Session=Depends(get_db)):


    todo_model= db.query(models.Todos).filter(models.Todos.id==todo_id).filter(models.Todos.owner_id==user.get("id")).first()

    if todo_model is None:
        raise http_exception()

    db.query(models.Todos).filter(models.Todos.id==todo_id).delete()

    db.commit()

    return successfull_response(200)



def successfull_response(statusCode:int):
    return {
        
        "successfull":statusCode
    }

def http_exception():
    return HTTPException(status_code=404,detail="to do not found")